#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiUdp.h>
#include "ThingSpeak.h"
const char* ssid = "Redmi";    
const char* password = "1234567890";
#include <NTPClient.h>
int meterpin = D2;
int preunit=0;
int currentunit=0;
int count=0;
WiFiClient  client;
unsigned long counterChannelNumber = 507070;            // Channel ID
const char * myCounterReadAPIKey = "MTAV5VMV3HMU471C"; // Read API Key
const int FieldNumber1 = 1;  // The field you wish to read
const int FieldNumber2 = 2;  // The field you wish to read
const int FieldNumber3 = 3;  // The field you wish to read
String formattedDate;
String dayStamp;
String timeStamp;
const long utcOffsetInSeconds = 19800;

char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
int h=0;



int billHH = 10;          //    HH - hours         ##Set these for reminder time in 24hr Format 
int billMM = 34;          //    MM - Minute
int billSS = 00;          //    SS - Seconds
int relay=D5;
int creading;
int preading;
int totalreading;
float totalamount;
int generate=0;
int nowHr, nowMin, nowSec;                     // to show current mm,hh,ss
// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds);
int flag=1;
void setup() 
{
  Serial.begin(9600);
  pinMode(meterpin, INPUT);
  WiFi.begin(ssid, password);
  pinMode(relay, OUTPUT);
  digitalWrite(relay,HIGH);
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(1000);
    Serial.println("Connecting..");
  }
  ThingSpeak.begin(client);
   timeClient.begin();
}
int readReading()
{
  int last = ThingSpeak.readLongField(counterChannelNumber, FieldNumber1, myCounterReadAPIKey);
  int statusCode = ThingSpeak.getLastReadStatus();
  return last;
}

int preReading()
{
  int last = ThingSpeak.readLongField(counterChannelNumber, FieldNumber2, myCounterReadAPIKey);
  int statusCode = ThingSpeak.getLastReadStatus();
  return last;
}

void loop() 
{
  int metervalue = digitalRead(meterpin);
  Serial.println(metervalue);
  if (metervalue==0)
  {
    count++;
  }
  if(count>10)
  {
      WiFiUDP ntpUDP;
      if (WiFi.status() == WL_CONNECTED) 
      { //Check WiFi connection status
        HTTPClient http;  //Declare an object of class HTTPClient    
        if(generate==1)
        {
            http.begin("http://api.thingspeak.com/update?api_key=K06GFRAG5LPMJ1CW&field1="+String(1+readReading())+"&field2="+String(creading+preading)+"&field3="+String(totalamount));  //Specify request destination
            generate=0;
        }
        else
        {
          http.begin("http://api.thingspeak.com/update?api_key=K06GFRAG5LPMJ1CW&field1="+String(1+readReading()));  //Specify request destination
        }
        int httpCode = http.GET();                                                                  //Send the request
        if (httpCode > 0) 
        {  
          //Check the returning code
          String payload = http.getString();   //Get the request response payload
          Serial.println(payload);                     //Print the response payload
        }
        Serial.println("data uploaded to think speak");
        http.end();   //Close connection
       }
        count=0;
        check();
   }
   WiFiUDP ntpUDP;
   timeClient.update();

  Serial.print(daysOfTheWeek[timeClient.getDay()]);
  Serial.print(", ");
  Serial.print(timeClient.getHours());
  Serial.print(":");
  nowHr=timeClient.getHours();
  Serial.print(timeClient.getMinutes());
  Serial.print(":");
  nowMin=timeClient.getMinutes();
  Serial.println(timeClient.getSeconds());
  nowSec=timeClient.getSeconds();
  Serial.println(timeClient.getFormattedTime());
  
  if (nowHr == billHH && flag==1) {
    
    if (nowMin == billMM) {
      flag=0;
        Serial.println("GenerateBill()");
        generateBill();
    }
  }
  
  delay(1000);        // delay in between reads for stability
}


void check()
{
  creading=readReading();
  preading=preReading();
  totalreading=creading-preading;
  Serial.println("This Month:"+String(totalreading));
  if(totalreading>=10)
  {
    digitalWrite(relay,LOW);
  }
}

void generateBill()
{
  delay(5000);
  generate=1;
  creading=readReading();
  preading=preReading();
  totalreading=creading-preading;
  totalamount=totalreading*20.0;
  Serial.println("creading:"+String(creading));
  Serial.println("preading:"+String(preading));
  Serial.println("totalreading:"+String(totalreading));
  Serial.println("totalAmount:"+String(totalamount));
  if (WiFi.status() == WL_CONNECTED) 
          { //Check WiFi connection status
            
            HTTPClient http;  //Declare an object of class HTTPClient
            http.begin("http://edutechindia.co.in/awsfreesms/results.php?send=ok&api=sVScKbRqGJW7dB2mgUxpy&numbers=7022230678&msg=Unit%20Consumed:"+String(totalreading)+"Price%20Per%unit:20.0%20Total%20Bill%20of%20this%20Month%20is:%20"+String(totalamount));
            int httpCode = http.GET();                                                                  //Send the request
            if (httpCode > 0) 
            { //Check the returning code
              String payload = http.getString();   //Get the request response payload
              Serial.println(payload);                     //Print the response payload
            }
            http.end();   //Close connection
          }
    delay(5000);
}
